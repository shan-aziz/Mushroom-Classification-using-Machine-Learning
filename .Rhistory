)
# Initialize an empty list to store confusion matrices data frames for plotting
cm_dfs <- list()
# Loop through predictions to generate and plot confusion matrices
for (model_name in names(predictions_list)) {
# Generate confusion matrix
cm <- confusionMatrix(predictions_list[[model_name]], y_test)
# Convert confusion matrix to a dataframe for ggplot
cm_df <- as.data.frame(cm$table)
colnames(cm_df) <- c("Reference", "Prediction", "Frequency")
# Store the data frame for later plotting
cm_dfs[[model_name]] <- cm_df
}
# Combine all confusion matrices into one dataframe
combined_cm_df <- bind_rows(cm_dfs, .id = "model")
# Map model identifiers to titles
model_titles <- c(mod1 = "Random Forest", mod2 = "Gradient Boosting Machines", mod3 = "RPART")
# Update model column to have the model titles
combined_cm_df$model <- model_titles[combined_cm_df$model]
# Plot using ggplot
ggplot(combined_cm_df, aes(x = Reference, y = Prediction, fill = Frequency)) +
geom_tile() + # Use tiles to represent the matrix
geom_text(aes(label = Frequency), vjust = 1) + # Add frequency text in each tile
facet_wrap(~model, scales = "free", labeller = labeller(model = label_value)) + # Create a subplot for each model using titles directly
scale_fill_gradient(low = "lightpink", high = "green3") + # Color gradient for frequencies
theme_bw() + # Minimal theme
labs(title = "Confusion Matrix for Models", x = "Actual Class", y = "Predicted Class")
knitr::opts_chunk$set(echo = TRUE)
# Setting the problem's data
observations <- c(11.0, 11.5, 11.7, 11.1, 11.4, 10.9)
# Prior settings for a uniform distribution
a_prior <- 10
b_prior <- 20
# Algorithm settings
U <- 10000
set.seed(1)
# Since there's no direct sampling method like rbeta for this problem,
# we simulate theta from the prior uniform distribution and then weigh
# these simulations by their likelihood given the data.
theta_samples <- runif(n=U, min=a_prior, max=b_prior)
likelihood = sapply(theta_samples, function(theta) {
prod(ifelse(observations > (theta - 1/2) & observations < (theta + 1/2), 1, 0))
})
# Normalizing the likelihood to approximate the posterior
# In this case, the likelihood acts as a weight for the posterior density
posterior = likelihood / sum(likelihood)
# Summary of posterior, directly via simulations
posterior_mean = sum(theta_samples * posterior)
posterior_sd = sqrt(sum(posterior * (theta_samples - posterior_mean)^2))
cat("Posterior Mean:", posterior_mean, "\n")
cat("Posterior SD:", posterior_sd, "\n")
knitr::opts_chunk$set(echo = TRUE)
# Setting the problem's data
observations <- c(11.0, 11.5, 11.7, 11.1, 11.4, 10.9)
# Prior settings for a uniform distribution
a_prior <- 10
b_prior <- 20
# Algorithm settings
U <- 10000
set.seed(1)
# Since there's no direct sampling method like rbeta for this problem,
# we simulate theta from the prior uniform distribution and then weigh
# these simulations by their likelihood given the data.
theta_samples <- runif(n=U, min=a_prior, max=b_prior)
likelihood = sapply(theta_samples, function(theta) {
prod(ifelse(observations > (theta - 1/2) & observations < (theta + 1/2), 1, 0))
})
# Normalizing the likelihood to approximate the posterior
# In this case, the likelihood acts as a weight for the posterior density
posterior = likelihood / sum(likelihood)
# Summary of posterior, directly via simulations
posterior_mean = sum(theta_samples * posterior)
posterior_sd = sqrt(sum(posterior * (theta_samples - posterior_mean)^2))
cat("Posterior Mean:", posterior_mean, "\n")
cat("Posterior SD:", posterior_sd, "\n")
# Joint distribution in compact form is the product of Bernoulli distributions
# For the sum of Yi, which is binomial:
# Pr(sum(Yi) = y | Theta) = choose(n, y) * Theta^y * (1-Theta)^(n-y), where n = 100
theta_values <- seq(0, 1, by = 0.1)
y <- 57
n <- 100
probabilities <- dbinom(y, size = n, prob = theta_values)
# Plotting
plot(theta_values, probabilities, type = "b", pch = 19, xlab = "Theta", ylab = "Probability",
main = "Probability of 57 Supports out of 100 vs. Theta")
# Since the prior is uniform, the posterior is proportional to the likelihood calculated before
# Plotting posterior probabilities (unnormalized)
plot(theta_values, probabilities, type = "b", pch = 19, xlab = "Theta",
ylab = "Posterior Probability",
main = "Posterior Distribution for Theta given 57 Supports out of 100")
# Posterior density is same as the probabilities calculated for discrete theta values,
# due to uniform prior. The plot would be identical to (c), representing the continuous
# range of Theta
plot(theta_values, probabilities, type = "b", pch = 19, xlab = "Theta",
ylab = "Posterior Probability",
main = "Posterior Distribution for Theta given 57 Supports out of 100")
# The plots from (b), (c), and (d) illustrate the probability of observing the
# survey results under different assumptions about Theta, the proportion of
# the population supporting policy Z. The posterior distributions reflect our
# updated beliefs about Theta after observing the data. Initially, with no preference
# among the Theta values (uniform prior), the likelihood of observing the data influences
# our beliefs, represented in the plots. With continuous Theta values and a uniform prior,
# the shape of the posterior density will highlight the most plausible
# Theta values given the data.
# Given prior information
mean_prior <- 0.2
sd_prior <- 1
# Convert mean and SD to shape (alpha) and rate (beta) for the Gamma distribution
alpha <- (mean_prior / sd_prior)^2
beta <- mean_prior / sd_prior^2
# Given observed data
n <- 20
sample_mean <- 3.8
# Update parameters for posterior Gamma distribution
alpha_posterior <- alpha + n
beta_posterior <- beta + n * sample_mean
# The posterior distribution of theta is Gamma(alpha_posterior, beta_posterior)
# Display the updated parameters
cat("Posterior shape (alpha):", alpha_posterior, "\n")
cat("Posterior rate (beta):", beta_posterior, "\n")
# Plotting the posterior distribution of theta
theta_vals <- seq(0, 10, length.out = 1000)
posterior_densities <- dgamma(theta_vals, shape = alpha_posterior,
rate = beta_posterior)
plot(theta_vals, posterior_densities, type = "l", lwd = 2,
xlab = "Theta", ylab = "Density",
main = "Posterior Distribution of Theta")
knitr::opts_chunk$set(echo = TRUE)
# Given prior information
mean_prior <- 0.2
sd_prior <- 1
# Convert mean and SD to shape (alpha) and rate (beta) for the Gamma distribution
alpha <- (mean_prior / sd_prior)^2
beta <- mean_prior / sd_prior^2
# Given observed data
n <- 20
sample_mean <- 3.8
# Update parameters for posterior Gamma distribution
alpha_posterior <- alpha + n * sample_mean
beta_posterior <- beta + n
# The posterior distribution of theta is Gamma(alpha_posterior, beta_posterior)
# Display the updated parameters
cat("Posterior shape (alpha):", alpha_posterior, "\n")
cat("Posterior rate (beta):", beta_posterior, "\n")
# Given prior information
mean_prior <- 0.2
sd_prior <- 1
# Convert mean and SD to shape (alpha) and rate (beta) for the Gamma distribution
alpha <- (mean_prior / sd_prior)^2
beta <- mean_prior / sd_prior^2
# Given observed data
n <- 20
sample_mean <- 3.8
# Update parameters for posterior Gamma distribution
alpha_posterior <- alpha + n
beta_posterior <- beta + n * sample_mean
# The posterior distribution of theta is Gamma(alpha_posterior, beta_posterior)
# Display the updated parameters
cat("Posterior shape (alpha):", alpha_posterior, "\n")
cat("Posterior rate (beta):", beta_posterior, "\n")
# Given prior information
mean_prior <- 0.2
sd_prior <- 1
# Convert mean and SD to shape (alpha) and rate (beta) for the Gamma distribution
alpha <- (mean_prior / sd_prior)^2
beta <- mean_prior / sd_prior^2
# Given observed data
n <- 20
sample_mean <- 3.8
# Update parameters for posterior Gamma distribution
alpha_posterior <- alpha + n * sample_mean
beta_posterior <- beta + n
# The posterior distribution of theta is Gamma(alpha_posterior, beta_posterior)
# Display the updated parameters
cat("Posterior shape (alpha):", alpha_posterior, "\n")
cat("Posterior rate (beta):", beta_posterior, "\n")
# Given prior information
mean_prior <- 0.2
sd_prior <- 1
# Convert mean and SD to shape (alpha) and rate (beta) for the Gamma distribution
alpha <- (mean_prior / sd_prior)^2
beta <- mean_prior / sd_prior^2
# Given observed data
n <- 20
sample_mean <- 3.8
# Update parameters for posterior Gamma distribution
alpha_posterior <- alpha + n
beta_posterior <- beta + n * sample_mean
# The posterior distribution of theta is Gamma(alpha_posterior, beta_posterior)
# Display the updated parameters
cat("Posterior shape (alpha):", alpha_posterior, "\n")
cat("Posterior rate (beta):", beta_posterior, "\n")
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
joint_distribution
# Probability of y successes in 100 trials given theta
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
joint_distribution
# Probability of y successes in 100 trials given theta
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
binomial_distribution
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes
y_example <- c(rep(1, 50), rep(0, 50))  # 50 supports, 50 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
print(paste("Joint Probability: ", joint_prob))
# Calculate binomial distribution for 50 successes and theta = 0.5
binom_prob <- binomial_distribution(50, theta = 0.5)
print(paste("Binomial Probability of 50 supports: ", binom_prob))
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
print(paste("Joint Probability: ", joint_prob))
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
print(paste("Binomial Probability of 57 supports: ", binom_prob))
theta_values <- seq(0, 1, by = 0.1)
y <- 57
n <- 100
probabilities <- dbinom(y, size = n, prob = theta_values)
# Plotting
plot(theta_values, probabilities, type = "b", pch = 19, xlab = "Theta", ylab = "Probability",
main = "Probability of 57 Supports out of 100 vs. Theta")
# Plotting posterior probabilities (unnormalized)
plot(theta_values, probabilities, type = "b", pch = 19, xlab = "Theta",
ylab = "Posterior Probability",
main = "Posterior Distribution for Theta given 57 Supports out of 100")
# Posterior density is same as the probabilities calculated for discrete theta values,
# due to uniform prior. The plot is identical to (c), representing the continuous
# range of Theta
plot(theta_values, probabilities, type = "b", pch = 19, xlab = "Theta",
ylab = "Posterior Probability",
main = "Posterior Distribution for Theta given 57 Supports out of 100")
println("The plots in sections (b), (c), and (d) show how likely we are to see the survey results under various assumptions about Theta, which represents the percentage of the population that supports policy Z. These posterior distributions update our understanding of Theta based on the survey data. Initially, when we don't favor any particular value of Theta (using a uniform prior), the data itself helps shape our beliefs, as depicted in the plots. With Theta values being continuous and starting from a uniform prior, the form of the posterior density will emphasize which Theta values are most credible given the data we have.")
println("hello")
print("hello")
cat("hello")
cat("The plots in sections (b), (c), and (d) show how likely we are to see the survey results under various assumptions about Theta, which represents the percentage of the population that supports policy Z. These posterior distributions update our understanding of Theta based on the survey data. Initially, when we don't favor any particular value of Theta (using a uniform prior), the data itself helps shape our beliefs, as depicted in the plots. With Theta values being continuous and starting from a uniform prior, the form of the posterior density will emphasize which Theta values are most credible given the data we have.")
cat("The plots in sections (b), (c), and (d) show how likely we are to see the survey
results under various assumptions about Theta, which represents the percentage of
the population that supports policy Z. These posterior distributions update our
understanding of Theta based on the survey data. Initially, when we don't favor
any particular value of Theta (using a uniform prior), the data itself helps shape
our beliefs, as depicted in the plots. With Theta values being continuous and
starting from a uniform prior, the form of the posterior density will emphasize
which Theta values are most credible given the data we have.")
cat("The plots in sections (b), (c), and (d) show how likely we are to see the survey
results under various assumptions about Theta, which represents the percentage of
the population that supports policy Z. These posterior distributions update our
understanding of Theta based on the survey data. Initially, when we don't favor
any particular value of Theta (using a uniform prior), the data itself helps shape
our understanding, as depicted in the plots. With Theta values being continuous and
starting from a uniform prior, the form of the posterior density will emphasize
which Theta values are most credible given the data we have.")
cat("The plots in sections (b), (c), and (d) show how likely we are to see the survey
results under various assumptions about Theta, which represents the percentage of
the population that supports policy Z. These posterior distributions update our
understanding of Theta based on the survey data. Initially, when we don't favor
any particular value of Theta (using a uniform prior), the data itself helps shape
our understanding, as depicted in the plots. With Theta values being continuous and
starting from a uniform prior, the form of the posterior density will emphasize
which Theta values are most acceptable given the data we have.")
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
print(paste("Joint Probability: ", joint_prob))
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob)
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob /n)
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob ,"/n")
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob )
cat("")
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob )
print("")
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob )
print()
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob )
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: /n", joint_prob )
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: \n", joint_prob )
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob \n)
# Function to calculate joint distribution
joint_distribution <- function(y, theta) {
probability <- prod(theta^y * (1 - theta)^(1 - y))
return(probability)
}
# Function to calculate binomial distribution probability
binomial_distribution <- function(y, theta) {
probability <- dbinom(y, size = 100, prob = theta)
return(probability)
}
# Example vector of outcomes for 57 supports out of 100
y_example <- c(rep(1, 57), rep(0, 43))  # 57 supports, 43 does not support
# Calculate joint distribution for theta = 0.5
joint_prob <- joint_distribution(y_example, theta = 0.5)
cat("Joint Probability: ", joint_prob ,"\n")
# Calculate binomial distribution for 57 successes and theta = 0.5
binom_prob <- binomial_distribution(57, theta = 0.5)
cat("Binomial Probability of 57 supports: ", binom_prob)
